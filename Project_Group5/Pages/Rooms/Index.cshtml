@page
@model Project_Group5.Pages.Rooms.IndexModel
@{
    var rooms = Model.Rooms;
    <link href="~/css/listroom.css" rel="stylesheet">
    <title>Hotel Room</title>
}

        <div class="search-bar">
            <form class="row g-3 align-items-center">
                <div class="col-auto">
                    <label for="checkin-date" class="col-form-label">Ngày đến</label>
                    <input type="date" id="checkin-date" class="form-control" onchange="calculateTotalPrice()">
                </div>

                <div class="col-auto">
                    <label for="checkout-date" class="col-form-label">Ngày đi</label>
                    <input type="date" id="checkout-date" class="form-control" onchange="calculateTotalPrice()">
                </div>

                <div class="col-auto">
                    <label for="promo-code" class="col-form-label">Mã khuyến mại</label>
                    <input type="text" id="promo-code" class="form-control" placeholder="Mã khuyến mại">
                </div>

                <div class="col-auto">
                    <button type="submit" class="choose-btn">Kiểm tra phòng</button>
                </div>
            </form>
        </div>




        <div class="row">
            <div class="col-md-8">
                <!-- Danh sách phòng -->
                <div class="container my-5">
                    @foreach (var room in rooms)
                    {
                        <div class="room-card">
                            <div class="room-info">
                                <div id="roomCarousel_@room.Id" class="carousel slide col-md-6" data-bs-ride="carousel">
                                    <div class="carousel-inner">
                                        @foreach (var r in room.Rooms)
                                        {
                                            @foreach (var image in r.ImageRooms)
                                            {
                                                <div class="carousel-item @(image == r.ImageRooms.First() ? "active" : "")">
                                                    <img src="/images/@image.Path" class="d-block w-100 room-image" alt="Room Image">
                                                </div>
                                            }

                                        }
                                    </div>
                                    <button class="carousel-control-prev" type="button" data-bs-target="#roomCarousel_@room.Id" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#roomCarousel_@room.Id" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </button>
                                </div>

                                <div class="room-details col-md-6">
                                    <h2 id="room_name_@room.Id">@room.Name</h2>
                                    <p>Số giường: @room.Bed</p>
                                    <input type="hidden" id="room_bed_@room.Id" value="@room.Bed">
                                    <ul class="amenities">
                                        <li><i class="fa fa-wifi"></i>Wifi</li>
                                        <li><i class="fa fa-tv"></i> TV</li>
                                        <li><i class="fa fa-bath"></i> Bồn tắm</li>
                                    </ul>
                                    <p class="price">Giá chỉ từ: <strong>@String.Format("{0:N0}", room.Price) VND</strong> / đêm</p>
                                    <input type="hidden" id="room_price_@room.Id" value="@room.Price">

                                    <div class="row col-md-12 d-flex justify-content-between">
                                        <button class="choose-btn col-md-5" data-bs-toggle="collapse" data-bs-target="#roomOptions_@room.Id" aria-expanded="false" aria-controls="roomOptions_@room.Id">
                                            Lựa chọn
                                        </button>
                                        <button class="choose-btn col-md-5">Xem chi tiết phòng</button>
                                    </div>
                                </div>
                            </div>

                            <!-- Hidden by default, shown when "Lựa chọn" is clicked -->
                            <div id="roomOptions_@room.Id" class="room-options collapse">
                                <div class="justify-content-between d-flex">
                                    <div class="col-md-8">
                                        <p><strong>@room.Name</strong></p>
                                        <p><del>@String.Format("{0:N0}", room.Price) VND</del> <strong>@String.Format("{0:N0}", room.Price) VND</strong> / đêm</p>
                                    </div>
                                    <div class="col-md-4 align-items-md-end">
                                        <label for="room-count">Số phòng:</label>
                                        <select class="form-select col-md-3" id="room-count_@room.Id" onchange="updateRoomOptions('@room.Id', @room.Bed, '@room.Name', @room.Price)">
                                            @for (int i = 0; i <= room.Rooms.Where(r => !r.Status.Equals("full")).Count(); i++)
                                            {
                                                <option value="@i">@i phòng</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div id="room-selectors_@room.Id"></div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="col-md-4">
                <!-- Thông tin phòng đã chọn nằm bên phải -->
                <div class="selected-rooms">
                    <h3>Thông Tin Phòng</h3>
                    <div class="selected-room">
                        <div class="selected-room-list">
                            @foreach (var room in rooms)
                            {
                                <div class="content-block" id="selected_room_@room.Id">

                                </div>
                            }
                        </div>
                        <p><strong>Tổng cộng: <span id="total-price">0</span> VND</strong></p>
                        <form id="preorderForm" method="get" action="/Rooms/PreOrder">
                            <input type="hidden" name="checkinDate" id="hidden-checkin-date" />
                            <input type="hidden" name="checkoutDate" id="hidden-checkout-date" />
                            <input type="hidden" name="roomData" id="roomData">
                            <button type="button" class="choose-btn" onclick="sendRoomData()">Đặt Ngay</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<script>
    // Select all collapse toggle buttons
    document.querySelectorAll('.choose-btn').forEach(button => {
        button.addEventListener('click', function () {
            const target = document.querySelector(this.getAttribute('data-bs-target')); // Get the target element
            const isCollapsed = target.style.display === 'block'; // Check if it's currently shown

            // Toggle the display property
            target.style.display = isCollapsed ? 'none' : 'block';

            // Optionally, you can add smooth transitions
            if (isCollapsed) {
                target.style.display = 'none';
            }
        });
    });
</script>

<script>
    function updateRoomOptions(roomId, maxBed, roomName, price) {
        const roomCount = document.getElementById(`room-count_${roomId}`).value;
        const selectorsContainer = document.getElementById(`room-selectors_${roomId}`);
        const selectedRoomsContainer = document.getElementById(`selected_room_${roomId}`);
        let totalGuests = {}; // Store guest counts per room
        let roomSelectorsHtml = '';
        let selectedRoomsHtml = '';

        // Clear previous selectors and selected rooms
        selectorsContainer.innerHTML = '';
        selectedRoomsContainer.innerHTML = '';

        // Generate adult and children selectors for each room
        for (let i = 1; i <= roomCount; i++) {
            totalGuests[i] = { adults: 1, children: 0 }; // Initialize guest count for each room

            const roomLabel = `<hr/><div class="justify-content-between d-flex">
            <div class="col-md-3">
            <p><strong>Phòng ${i}</strong></p>
            </div>
            `;
            const adultSelector = `<div class="col-md-3">
            <label for="adult-count_${roomId}_${i}">Người lớn:</label>
            <select class="form-select col-md-3" id="adult-count_${roomId}_${i}">
                ${Array.from({ length: maxBed }, (_, index) => `<option value="${index + 1}">${index + 1}</option>`).join('')}
            </select>
            </div>
        `;
            const childrenSelector = `<div class="col-md-3">
            <label for="children-count_${roomId}_${i}">Trẻ em (6-11 tuổi):</label>
            <select class="form-select col-md-3" id="children-count_${roomId}_${i}">
                ${Array.from({ length: maxBed + 1 }, (_, index) => `<option value="${index}">${index}</option>`).join('')}
            </select>
            </div>
        `;

            // Build the HTML for selectors
            roomSelectorsHtml += roomLabel + adultSelector + childrenSelector + `</div>`;

            // Build the HTML for selected rooms info
            selectedRoomsHtml += `
            <div id="selected_room_${roomId}_${i}">
                <p><strong>Phòng ${i}</strong></p>
                <p><strong>${roomName}</strong></p>
                <p id="display_room_price_${roomId}_${i}">Giá: ${formatPrice(price)} VND / đêm</p>
                <input type="hidden" id="selected_room_price_${roomId}_${i}" class="selected_room_price" value="${price}">
                <p>Số người lớn: <span id="adult-count-display_${roomId}_${i}">1</span></p>
                <p>Số trẻ em: <span id="children-count-display_${roomId}_${i}">0</span></p>
            </div>
            <hr/>
        `;
        }

        // Set the generated HTML to the containers
        selectorsContainer.innerHTML = roomSelectorsHtml;
        selectedRoomsContainer.innerHTML = selectedRoomsHtml;

        // After setting the HTML, add event listeners for each room
        for (let i = 1; i <= roomCount; i++) {
            document.getElementById(`adult-count_${roomId}_${i}`).addEventListener('change', function () {
                totalGuests[i].adults = parseInt(this.value);
                document.getElementById(`adult-count-display_${roomId}_${i}`).innerText = this.value;
                updateRoomPrice(roomId, i, maxBed, price);
            });

            document.getElementById(`children-count_${roomId}_${i}`).addEventListener('change', function () {
                totalGuests[i].children = parseInt(this.value);
                document.getElementById(`children-count-display_${roomId}_${i}`).innerText = this.value;
                updateRoomPrice(roomId, i, maxBed, price);
            });
        }
        calculateTotalPrice();
    }

    // Function to update room price based on total guests
    function updateRoomPrice(roomId, roomIndex, maxBed, basePrice) {
        var adultCount = parseInt(document.getElementById(`adult-count_${roomId}_${roomIndex}`).value);
        var childrenCount = parseInt(document.getElementById(`children-count_${roomId}_${roomIndex}`).value);

        const currentGuests = adultCount + childrenCount;
        let updatedPrice = basePrice;

        // If the number of guests exceeds the maxBed, apply a 30% increase per extra guest
        if (currentGuests > maxBed) {
            const extraGuests = currentGuests - maxBed;
            updatedPrice = basePrice * (1 + extraGuests * 0.3); // Increase by 30% per extra guest
        }

        // Update price display and hidden input value
        document.getElementById(`display_room_price_${roomId}_${roomIndex}`).innerHTML = `Giá: ${formatPrice(updatedPrice)} VND / đêm`;
        document.getElementById(`selected_room_price_${roomId}_${roomIndex}`).value = updatedPrice;

        calculateTotalPrice(); // Recalculate the total price after updating this room
    }




    function calculateTotalPrice() {
        const selectedRoomPrices = document.querySelectorAll('.selected_room_price');
        let totalPrice = 0;

        selectedRoomPrices.forEach(priceInput => {
            totalPrice += parseInt(priceInput.value);
        });

        let stayDuration = 1;
        const checkinDate = new Date(document.getElementById('checkin-date').value);
        const checkoutDate = new Date(document.getElementById('checkout-date').value);

        // Tính số ngày lưu trú
        if (checkoutDate > checkinDate) {
            stayDuration = (checkoutDate - checkinDate) / (1000 * 3600 * 24);
        } else {
            stayDuration = 1;
        }

        totalPrice *= stayDuration;

        // Display the total price
        document.getElementById('total-price').innerText = formatPrice(totalPrice);
    }

    function formatPrice(amount) {
        return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
    }
</script>

<script>
    function getRoomsDataById(roomId) {
        const roomCount = document.getElementById(`room-count_${roomId}`).value;
        const bedElement = document.getElementById(`room_bed_${roomId}`).value;
        const priceElement = document.getElementById(`room_price_${roomId}`).value;
        const roomList = [];

        for (let i = 1; i <= roomCount; i++) {

            const adultCountElement = document.getElementById(`adult-count-display_${roomId}_${i}`);
            const childrenCountElement = document.getElementById(`children-count-display_${roomId}_${i}`);

            if (priceElement && adultCountElement && childrenCountElement) {
                const room = {
                    id: i,
                    price: 0,
                    adultCount: adultCountElement.innerText.trim(),
                    childrenCount: childrenCountElement.innerText.trim(),
                };
                roomList.push(room);
            }
        }

        return {
            roomType: roomId,
            bed: bedElement,
            price: priceElement,
            name: document.getElementById(`room_name_${roomId}`).innerText.trim(),
            roomList
        };
    }

    function sendRoomData() {
        const roomList = [];

        // Use data attributes for better flexibility
        const roomElements = document.querySelectorAll('[id^="room_name_"]');

        roomElements.forEach(roomElement => {
            const roomId = roomElement.id.split('_')[2];  // Extract room ID
            const roomData = getRoomsDataById(roomId);
            if (roomData.roomList.length > 0) {
                roomList.push(roomData);
            }
        });

        // Store JSON data in a hidden field
        const roomDataJson = JSON.stringify(roomList);
        document.getElementById('roomData').value = roomDataJson;


        // Store check-in and check-out dates
        document.getElementById('hidden-checkin-date').value = document.getElementById('checkin-date').value;
        document.getElementById('hidden-checkout-date').value = document.getElementById('checkout-date').value;

        // Validate dates before form submission
        if (!validateDates()) {
            alert("Please ensure the check-in and check-out dates are valid.");
            return;
        }

        // Submit the form
        document.getElementById('preorderForm').submit();
    }

    // Example validation for date fields
    function validateDates() {
        const checkinDate = document.getElementById('checkin-date').value;
        const checkoutDate = document.getElementById('checkout-date').value;

        if (new Date(checkinDate) >= new Date(checkoutDate)) {
            return false;  // Invalid date range
        }
        return true;
    }

    window.onload = function () {
        // Get the current date
        const today = new Date();

        // Format the date to yyyy-mm-dd format
        const formattedDate = today.toISOString().split('T')[0];

        // Set the check-in date value to the current date
        document.getElementById('checkin-date').value = formattedDate;

        // Optionally, you can set the checkout date to a default value (e.g., next day)
        const tomorrow = new Date();
        tomorrow.setDate(today.getDate() + 1);  // Add 1 day to current date
        const formattedTomorrow = tomorrow.toISOString().split('T')[0];
        document.getElementById('checkout-date').value = formattedTomorrow;

        // Optionally call calculateTotalPrice if you want to auto-calculate on load
        calculateTotalPrice();
    };


</script>

